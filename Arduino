//Libraries and network definitions
#include <WiFiNINA.h>
#include <SPI.h>
#include "arduino_connection.h"

//System Variables and Declaration
char ssid[] = NETWORK_SSID;
char pass[] = NETWORK_PASS;
int status = WL_IDLE_STATUS;
int analogPin0 = A0;
int analogPin1 = A1;
int val1 = 0;
int val2 = 0;
bool avail1 = 0;
bool avail2 = 0;
int spot1 = 0;
int spot2 = 0;
char server[] = "https://parkinglotcapstone.web.app";


//POST Variables
String postData1;
String postData2;
String postVariable1 = "id";
String postVariable2 = "available";

WiFiSSLClient client;

void setup() {
  Serial.begin(9600);
  while(!Serial){
    ;
  }
  if(WiFi.status() == WL_NO_MODULE){
    Serial.println("Communication with WiFi module failed.");
    while(true);
  }  
  
  String fv = WiFi.firmwareVersion();
  if(fv < WIFI_FIRMWARE_LATEST_VERSION){
    Serial.println("Please upgrade the firmware");
  }

  while(status != WL_CONNECTED) {
    Serial.print("Attempting to connect to Network: ");
    Serial.println(ssid);
    status = WiFi.begin(ssid, pass);
    delay(5000);
  }
  
  Serial.print("You are connected to the network");
  printCurrentNet();
  printWiFiData();
}

//******MAIN*******
void loop() { 

sensors();
postData1 = postVariable1 + spot1 + postVariable2 + avail1;
postData2 = postVariable1 + spot2 + postVariable2 + avail2;
  post("0", spot1, avail1);
  post("0", spot2, avail2);
  delay(2000);
}

void post(String parkID, int spotID, bool avail){
//Connect to server and POST
  String data = "{\"id\":\"" + parkID + "-" + spotID + "\",\"status\": " + (avail ? "true" : "false") + "}";
  if(client.connect(server,443)){
    Serial.println("connected to server");
    client.println("POST /updateSpot HTTP/1.1");
    client.println("Host: parkinglotcapstone.web.app");
    client.println("Content-Type: application/json");
    client.print("Content-Length: ");
    client.println(data.length());
    client.println();
    client.print(data);
  }
  else{
    Serial.println("not connected");
  }
  
  if(client.connected()){
    client.stop();
  }
  Serial.println(data);
}

//Collect information from sensors
void sensors(){
 val1 = analogRead(analogPin0);
 val2 = analogRead(analogPin1);
//0 = empty; 1 = full;
 switch(val1){
  case 0 ... 88:
  spot1 = 00001;
  avail1 = true;
  break;
  default:
  spot1 = 00001;
  avail1 = false;  
 }
 switch(val2){
  case 0 ... 88:
  spot2 = 00002;
  avail2 = true;
  break;
  default:
  spot2 = 00002;
  avail1 = false;
 }
 delay(200);
}

//Ensure connection
void printCurrentNet(){
  Serial.print("SSID: ");
  Serial.println(WiFi.SSID());
  byte bssid[6];
  WiFi.BSSID(bssid);
  Serial.print("BSSID: ");
  printMacAddress(bssid);
  long rssi = WiFi.RSSI();
  Serial.println("signal strength (RSSI): ");
  Serial.println(rssi);
  byte encryption = WiFi.encryptionType();
  Serial.print("Encryption Type: ");
  Serial.println(encryption, HEX);
  Serial.println();
}

void printWiFiData() {
  IPAddress ip = WiFi.localIP();
  Serial.print("IP Address: ");
  Serial.println(ip);
  Serial.println(ip);
  byte mac[6];
  WiFi.macAddress(mac);
  Serial.print("MAC address: ");
  printMacAddress(mac);
}

void printMacAddress(byte mac[]){
  for(int i = 5; i >= 0; i--) {
    if(mac[i] < 16) {
      Serial.print("0");
    }
  Serial.print(mac[i], HEX);
  if(i > 0){
    Serial.print(":");
  }
}
Serial.println();
}
